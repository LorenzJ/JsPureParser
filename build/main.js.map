{"version":3,"file":"main.js","sources":["../src/CharStream.js","../src/Result.js","../src/Parser.js","../src/main.js"],"sourcesContent":["export default class CharStream {\r\n    constructor(data, cursor, row, column) {\r\n        this.data = data;\r\n        this.cursor = cursor;\r\n        this.row = row;\r\n        this.column = column;\r\n        Object.freeze(this);\r\n    }\r\n\r\n    advance() {\r\n        const char = this.data[this.cursor];\r\n        const newStream =\r\n            char === '\\n'\r\n            ? new CharStream(this.data, this.cursor + 1, this.row + 1, 1)\r\n            : new CharStream(this.data, this.cursor + 1, this.row, this.column + 1);\r\n        return { char: char, stream: newStream };\r\n    }\r\n\r\n    static FromString(string) {\r\n        return new CharStream(string, 0, 1, 1);\r\n    }\r\n}","export class Result {\r\n    constructor(stream) {\r\n        this.stream = stream;\r\n    }\r\n    map(_) { throw undefined; }\r\n    bind(_) { throw undefined; }\r\n}\r\n\r\nexport class Success extends Result {\r\n    constructor(value, stream) {\r\n        super(stream);\r\n        this.value = value;\r\n        Object.freeze(this);\r\n    }\r\n    map(f) {\r\n        const [value, stream] = f(this.value, this.stream);\r\n        return new Success(value, stream);\r\n    }\r\n    bind(f) {\r\n        return f(this.value, this.stream);\r\n    }\r\n}\r\n\r\nexport class Failure extends Result {\r\n    constructor(message, stream) {\r\n        super(stream);\r\n        this.message = message;\r\n        Object.freeze(this);\r\n    }\r\n    map(_) {\r\n        return this;\r\n    }\r\n    bind(_) {\r\n        return this;\r\n    }\r\n}","import { Success, Failure } from \"./Result\";\r\n\r\nconst position = stream => new Success([stream.row, stream.column], stream);\r\n\r\nconst lazy = f => stream => f () (stream);\r\n\r\nconst return_ = x => stream => new Success(x, stream);\r\n\r\nconst fail = message => stream =>\r\n    new Failure(message, stream);\r\n\r\nconst bind = parser => f => stream => \r\n    parser (stream).bind((value, stream) => f (value) (stream));\r\n\r\nconst map = parser => f =>\r\n    bind (parser)\r\n        (x => return_ (f (x)));\r\n\r\nconst optional = parser => stream => {\r\n    const result = parser (stream);\r\n    if (result instanceof Failure) {\r\n        return new Success(undefined, stream);\r\n    } else {\r\n        return result;\r\n    }\r\n}\r\n\r\nconst string = str => stream => {\r\n    const str_ = ([head, ...tail]) =>\r\n        bind (any)\r\n            (c => stream_ =>\r\n                c === head ?\r\n                    (tail.length === 0 ?\r\n                        return_ (str) (stream_)\r\n                    : str_ (tail) (stream_))\r\n                : fail (\"Got '\" + c + \"' expected '\" + head + \"'\") (stream))\r\n    return str_ (str) (stream);\r\n}\r\n        \r\nconst withDefault = x => parser =>\r\n    map (optional (parser))\r\n        (option => option ? option : x);\r\n\r\nconst pipe = ([head, ...tail]) =>\r\n    head === undefined ?\r\n        return_ ([]) :\r\n        bind (head)\r\n            (h => map (pipe (tail))\r\n                (t => [h].concat(t)));\r\n\r\nconst ignore = ([head, ...tail]) => \r\n    head === undefined ?\r\n        return_ (undefined) :\r\n        bind (head) (_ => ignore (tail));\r\n\r\nconst do_ = ({first = [], apply, then = []}) => \r\n    bind(ignore (first))\r\n        (_ => bind (apply)\r\n            (value => map (ignore (then))\r\n            (_ => value)));\r\n\r\nconst any = stream => {\r\n    const { char, stream: stream1 } = stream.advance();\r\n    return char\r\n        ? new Success(char, stream1)\r\n        : new Failure(\"End of file.\", stream1);\r\n}\r\n\r\nconst eof = stream => {\r\n    const result = any (stream);\r\n    if (result instanceof Failure) {\r\n        return new Success(undefined, stream);\r\n    } else {\r\n        return new Failure(\"Expected eof, got: \" + result.value, stream);\r\n    }\r\n}\r\n\r\n const char = predicate =>\r\n    bind (any)\r\n        (x => predicate (x) ? \r\n            return_ (x) : \r\n            fail (x + \"does not match predicate.\"));\r\n\r\nconst many = parser => stream =>\r\n    bind (optional (parser))\r\n        (head => stream_ =>\r\n            head === undefined ?\r\n                return_ ([]) (stream_) :\r\n            stream === stream_ ?\r\n                fail (\"infinite loop detected.\") (stream) :\r\n                map (many (parser))\r\n                    (tail => [].concat([head], tail))\r\n                    (stream_))\r\n        (stream);\r\n\r\nconst many1 = parser =>\r\n    bind (parser)\r\n        (head => map (many (parser))\r\n            (tail => [head].concat(tail)));\r\n\r\nconst manySepEndBy = parser => separator => stream =>\r\n    bind (optional (parser))\r\n        (head => stream_ => \r\n            head === undefined ? \r\n                return_ ([]) (stream_)\r\n            : stream === stream_ ? \r\n                fail (\"infinite loop detected.\") (stream)\r\n            : bind (optional (separator))\r\n                (sep => sep === undefined\r\n                    ? return_ ([head])\r\n                    : map (manySepEndBy (parser) (separator))\r\n                        (tail => [].concat([head], tail)))\r\n                (stream_))\r\n        (stream);\r\n\r\nconst many1SepEndBy = parser => separator =>\r\n    bind (parser)\r\n        (head => bind (optional (separator))\r\n            (sep =>\r\n                sep === undefined ? \r\n                    return_ ([head])\r\n                : map (manySepEndBy (parser) (separator))\r\n                    (tail => [].concat([head], tail))));\r\n\r\nconst many1SepBy = parser => separator => stream =>\r\n    bind (parser)\r\n        (head => stream_ => \r\n            head === undefined ? \r\n                return_ ([]) (stream_)\r\n            : stream === stream_ ?\r\n                fail (\"infinite loop detected.\") (stream)\r\n            : bind (optional (separator))\r\n                (sep => \r\n                    sep === undefined ? \r\n                        return_ ([head])\r\n                    : map (many1SepBy (parser) (separator))\r\n                        (tail => [].concat([head], tail)))\r\n                (stream_))\r\n        (stream);\r\n\r\nconst manySepBy = parser => separator => \r\n    bind (optional (parser))\r\n        (head => head === undefined\r\n            ? return_ ([])\r\n            : bind (optional (separator))\r\n            (sep =>sep === undefined\r\n                ? return_ ([head])\r\n                : map (many1SepBy (parser) (separator))\r\n                    (tail => [].concat([head], tail))));\r\n\r\nconst integer =\r\n    map\r\n        (many1 (char (c => c >= '0' && c <= '9')))\r\n        (chars => (+(chars.join(\"\"))));\r\n\r\nconst choice = parsers => stream => {\r\n    function choice_(p, e, stream) {\r\n        if (p.length === 0) {\r\n            return new Failure(\"Failed to parse choices: \\n\" + e.join(\"\\n\\t\"));\r\n        } else {\r\n            const [parser, ...tail] = p;\r\n            const result = parser (stream);\r\n            if (result instanceof Success) {\r\n                return result;\r\n            } else {\r\n                return choice_(tail, e.concat([result.message]), stream);\r\n            }\r\n        }\r\n    }\r\n    return choice_(parsers, [], stream);\r\n}\r\n\r\nexport default {\r\n    return: return_,\r\n    fail: fail,\r\n    bind: bind,\r\n    map: map,\r\n    optional: optional,\r\n    withDefault: withDefault,\r\n    position: position,\r\n    char: char,\r\n    string: string,\r\n    any: any,\r\n    eof: eof,\r\n    lazy: lazy,\r\n    many: many,\r\n    many1: many1,\r\n    manySepEndBy: manySepEndBy,\r\n    many1SepEndBy: many1SepEndBy,\r\n    manySepBy: manySepBy,\r\n    many1SepBy: many1SepBy,\r\n    integer: integer,\r\n    pipe: pipe,\r\n    choice: choice,\r\n    do: do_\r\n}","import CharStream from \"./CharStream\";\r\nimport Parser from \"./Parser\";\r\nimport { Success, Failure } from \"./Result\";\r\n\r\nfunction test() {\r\n    const parser = Parser.string (\"H\");\r\n    const result = parser (CharStream.FromString(\"H\"));\r\n}\r\n\r\ntest();"],"names":[],"mappings":";;AAAe,MAAM,UAAU,CAAC;IAC5B,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE;QACnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACvB;;IAED,OAAO,GAAG;QACN,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,SAAS;YACX,IAAI,KAAK,IAAI;cACX,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;cAC3D,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5E,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;KAC5C;;IAED,OAAO,UAAU,CAAC,MAAM,EAAE;QACtB,OAAO,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KAC1C;;;CACJ,DCrBM,MAAM,MAAM,CAAC;IAChB,WAAW,CAAC,MAAM,EAAE;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IACD,GAAG,CAAC,CAAC,EAAE,EAAE,MAAM,SAAS,CAAC,EAAE;IAC3B,IAAI,CAAC,CAAC,EAAE,EAAE,MAAM,SAAS,CAAC,EAAE;CAC/B;;AAED,AAAO,MAAM,OAAO,SAAS,MAAM,CAAC;IAChC,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE;QACvB,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACvB;IACD,GAAG,CAAC,CAAC,EAAE;QACH,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KACrC;IACD,IAAI,CAAC,CAAC,EAAE;QACJ,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACrC;CACJ;;AAED,AAAO,MAAM,OAAO,SAAS,MAAM,CAAC;IAChC,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE;QACzB,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACvB;IACD,GAAG,CAAC,CAAC,EAAE;QACH,OAAO,IAAI,CAAC;KACf;IACD,IAAI,CAAC,CAAC,EAAE;QACJ,OAAO,IAAI,CAAC;KACf;;;CACJ,DCjCD,MAAM,QAAQ,GAAG,MAAM,IAAI,IAAI,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;;AAE5E,MAAM,IAAI,GAAG,CAAC,IAAI,MAAM,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;AAE1C,MAAM,OAAO,GAAG,CAAC,IAAI,MAAM,IAAI,IAAI,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;;AAEtD,MAAM,IAAI,GAAG,OAAO,IAAI,MAAM;IAC1B,IAAI,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;;AAEjC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,MAAM;IAC9B,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;;AAEhE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC;IACnB,IAAI,EAAE,MAAM,CAAC;SACR,CAAC,IAAI,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE/B,MAAM,QAAQ,GAAG,MAAM,IAAI,MAAM,IAAI;IACjC,MAAM,MAAM,GAAG,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/B,IAAI,MAAM,YAAY,OAAO,EAAE;QAC3B,OAAO,IAAI,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;KACzC,MAAM;QACH,OAAO,MAAM,CAAC;KACjB;EACJ;;AAED,MAAM,MAAM,GAAG,GAAG,IAAI,MAAM,IAAI;IAC5B,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC;QACzB,IAAI,EAAE,GAAG,CAAC;aACL,CAAC,IAAI,OAAO;gBACT,CAAC,KAAK,IAAI;qBACL,IAAI,CAAC,MAAM,KAAK,CAAC;wBACd,OAAO,EAAE,GAAG,CAAC,EAAE,OAAO,CAAC;sBACzB,IAAI,EAAE,IAAI,CAAC,EAAE,OAAO,CAAC;kBACzB,IAAI,EAAE,OAAO,GAAG,CAAC,GAAG,cAAc,GAAG,IAAI,GAAG,GAAG,CAAC,EAAE,MAAM,CAAC,EAAC;IACxE,OAAO,IAAI,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;EAC9B;;AAED,MAAM,WAAW,GAAG,CAAC,IAAI,MAAM;IAC3B,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SAClB,MAAM,IAAI,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;;AAExC,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC;IACzB,IAAI,KAAK,SAAS;QACd,OAAO,EAAE,EAAE,CAAC;QACZ,IAAI,EAAE,IAAI,CAAC;aACN,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;iBAClB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEtC,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC;IAC3B,IAAI,KAAK,SAAS;QACd,OAAO,EAAE,SAAS,CAAC;QACnB,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;;AAEzC,MAAM,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,GAAG,EAAE,CAAC;IACvC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACf,CAAC,IAAI,IAAI,EAAE,KAAK,CAAC;aACb,KAAK,IAAI,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;aAC5B,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;;AAE3B,MAAM,GAAG,GAAG,MAAM,IAAI;IAClB,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IACnD,OAAO,IAAI;UACL,IAAI,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;UAC1B,IAAI,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;EAC9C;;AAED,MAAM,GAAG,GAAG,MAAM,IAAI;IAClB,MAAM,MAAM,GAAG,GAAG,EAAE,MAAM,CAAC,CAAC;IAC5B,IAAI,MAAM,YAAY,OAAO,EAAE;QAC3B,OAAO,IAAI,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;KACzC,MAAM;QACH,OAAO,IAAI,OAAO,CAAC,qBAAqB,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KACpE;EACJ;;CAEA,MAAM,IAAI,GAAG,SAAS;IACnB,IAAI,EAAE,GAAG,CAAC;SACL,CAAC,IAAI,SAAS,EAAE,CAAC,CAAC;YACf,OAAO,EAAE,CAAC,CAAC;YACX,IAAI,EAAE,CAAC,GAAG,2BAA2B,CAAC,CAAC,CAAC;;AAEpD,MAAM,IAAI,GAAG,MAAM,IAAI,MAAM;IACzB,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SACnB,IAAI,IAAI,OAAO;YACZ,IAAI,KAAK,SAAS;gBACd,OAAO,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC;YAC1B,MAAM,KAAK,OAAO;gBACd,IAAI,EAAE,yBAAyB,CAAC,EAAE,MAAM,CAAC;gBACzC,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;qBACd,IAAI,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;qBAChC,OAAO,CAAC,CAAC;SACrB,MAAM,CAAC,CAAC;;AAEjB,MAAM,KAAK,GAAG,MAAM;IAChB,IAAI,EAAE,MAAM,CAAC;SACR,IAAI,IAAI,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;aACvB,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;AAE3C,MAAM,YAAY,GAAG,MAAM,IAAI,SAAS,IAAI,MAAM;IAC9C,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SACnB,IAAI,IAAI,OAAO;YACZ,IAAI,KAAK,SAAS;gBACd,OAAO,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC;cACxB,MAAM,KAAK,OAAO;gBAChB,IAAI,EAAE,yBAAyB,CAAC,EAAE,MAAM,CAAC;cAC3C,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;iBACxB,GAAG,IAAI,GAAG,KAAK,SAAS;sBACnB,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;sBAChB,GAAG,EAAE,YAAY,EAAE,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;yBACpC,IAAI,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;iBACzC,OAAO,CAAC,CAAC;SACjB,MAAM,CAAC,CAAC;;AAEjB,MAAM,aAAa,GAAG,MAAM,IAAI,SAAS;IACrC,IAAI,EAAE,MAAM,CAAC;SACR,IAAI,IAAI,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;aAC/B,GAAG;gBACA,GAAG,KAAK,SAAS;oBACb,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;kBAClB,GAAG,EAAE,YAAY,EAAE,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;qBACpC,IAAI,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;AAExD,MAAM,UAAU,GAAG,MAAM,IAAI,SAAS,IAAI,MAAM;IAC5C,IAAI,EAAE,MAAM,CAAC;SACR,IAAI,IAAI,OAAO;YACZ,IAAI,KAAK,SAAS;gBACd,OAAO,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC;cACxB,MAAM,KAAK,OAAO;gBAChB,IAAI,EAAE,yBAAyB,CAAC,EAAE,MAAM,CAAC;cAC3C,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;iBACxB,GAAG;oBACA,GAAG,KAAK,SAAS;wBACb,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;sBAClB,GAAG,EAAE,UAAU,EAAE,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;yBAClC,IAAI,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;iBACzC,OAAO,CAAC,CAAC;SACjB,MAAM,CAAC,CAAC;;AAEjB,MAAM,SAAS,GAAG,MAAM,IAAI,SAAS;IACjC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SACnB,IAAI,IAAI,IAAI,KAAK,SAAS;cACrB,OAAO,EAAE,EAAE,CAAC;cACZ,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;aAC5B,GAAG,GAAG,GAAG,KAAK,SAAS;kBAClB,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;kBAChB,GAAG,EAAE,UAAU,EAAE,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;qBAClC,IAAI,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;AAExD,MAAM,OAAO;IACT,GAAG;SACE,KAAK,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;SACzC,KAAK,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEvC,MAAM,MAAM,GAAG,OAAO,IAAI,MAAM,IAAI;IAChC,SAAS,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE;QAC3B,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YAChB,OAAO,IAAI,OAAO,CAAC,6BAA6B,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;SACtE,MAAM;YACH,MAAM,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC5B,MAAM,MAAM,GAAG,MAAM,EAAE,MAAM,CAAC,CAAC;YAC/B,IAAI,MAAM,YAAY,OAAO,EAAE;gBAC3B,OAAO,MAAM,CAAC;aACjB,MAAM;gBACH,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;aAC5D;SACJ;KACJ;IACD,OAAO,OAAO,CAAC,OAAO,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;EACvC;;AAED,aAAe;IACX,MAAM,EAAE,OAAO;IACf,IAAI,EAAE,IAAI;IACV,IAAI,EAAE,IAAI;IACV,GAAG,EAAE,GAAG;IACR,QAAQ,EAAE,QAAQ;IAClB,WAAW,EAAE,WAAW;IACxB,QAAQ,EAAE,QAAQ;IAClB,IAAI,EAAE,IAAI;IACV,MAAM,EAAE,MAAM;IACd,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,IAAI,EAAE,IAAI;IACV,IAAI,EAAE,IAAI;IACV,KAAK,EAAE,KAAK;IACZ,YAAY,EAAE,YAAY;IAC1B,aAAa,EAAE,aAAa;IAC5B,SAAS,EAAE,SAAS;IACpB,UAAU,EAAE,UAAU;IACtB,OAAO,EAAE,OAAO;IAChB,IAAI,EAAE,IAAI;IACV,MAAM,EAAE,MAAM;IACd,EAAE,EAAE,GAAG;;;CACV,DC/LD,SAAS,IAAI,GAAG;IACZ,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACnC,MAAM,MAAM,GAAG,MAAM,EAAE,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;CACtD;;AAED,IAAI,EAAE"}